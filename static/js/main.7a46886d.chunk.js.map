{"version":3,"sources":["store/loading.ts","store/loaded.ts","store/sortType.ts","store/todos.ts","store/errorMessage.ts","store/index.ts","components/Start.tsx","helpers/getData.ts","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.tsx","components/TodoButton/TodoButton.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["loadingAction","type","loadingReducer","state","action","loadedReducer","sortTypeReducer","sortType","todosReducer","todos","errorMessageReducer","message","isLoading","loading","rootReducer","combineReducers","loaded","errorMessage","store","createStore","composeWithDevTools","mapDispatch","load","connect","connector","title","onClick","disabled","getAll","url","fetch","then","response","json","getData","a","todosFromServer","usersFromServer","preparedTodos","map","todo","user","find","id","userId","TodoCard","className","name","completed","TodoList","todoList","key","TodoButton","handleClick","status","App","useState","setSortType","setTodos","setIsLoading","isLoaded","setIsLoaded","setErrorMessage","handleLoadClick","length","sortedTodos","useMemo","sort","currTodo","nextTodo","localeCompare","getSortedTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7a46886d.chunk.js","sourcesContent":["import { Action } from 'redux';\n\nconst LOADING = 'START_LOADING';\n\ntype Loading = Action<typeof LOADING>;\n\nexport const loadingAction = (): Loading => ({ type: LOADING });\n\n\nconst loadingReducer = (state = false, action: Loading) => {\n  switch (action.type) {\n    case LOADING:\n      return true;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { Action } from 'redux';\n\nconst LOADED = 'LOADED';\n\ntype Loaded = Action<typeof LOADED>;\n\nexport const loadedAction= (): Loaded => ({ type: LOADED });\n\nconst loadedReducer = (state = false, action: Loaded) => {\n  switch (action.type) {\n    case LOADED:\n      return true;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadedReducer;\n","import { Action } from 'redux';\n\nconst SORT_TYPE = 'SORT_TYPE';\n\ntype SortType = Action<typeof SORT_TYPE> & { sortType: string };\n\nexport const setSortTypeAction = (sortType: string): SortType => ({ type: SORT_TYPE, sortType });\n\nconst sortTypeReducer = (state = '', action: SortType) => {\n  switch (action.type) {\n    case SORT_TYPE:\n      return action.sortType;\n\n    default:\n      return state;\n  }\n};\n\nexport default sortTypeReducer;\n","import { Action } from 'redux';\n\nconst TODOS = 'TODOS';\n\ntype Todos = Action<typeof TODOS> & { todos: Todo[] };\n\nexport const setTodosAction = (todos: Todo[]): Todos => ({ type: TODOS, todos });\n\nconst todosReducer = (state = [] as Todo[], action: Todos) => {\n  switch (action.type) {\n    case TODOS:\n      return action.todos;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { Action } from 'redux';\n\nconst ERROR = 'ERROR';\n\ntype Error = Action<typeof ERROR> & { message: string };\n\nexport const setTodosAction = (message: string): Error => ({ type: ERROR, message });\n\nconst errorMessageReducer = (state = '', action: Error) => {\n  switch (action.type) {\n    case ERROR:\n      return action.message;\n\n    default:\n      return state;\n  }\n};\n\nexport default errorMessageReducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport loadingReducer from './loading';\nimport loadedReducer from './loaded';\nimport sortTypeReducer from './sortType';\nimport todosReducer from './todos';\nimport errorMessageReducer from './errorMessage';\n\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const isLoaded = (state: RootState) => state.loaded;\nexport const getSortType = (state: RootState) => state.sortType;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\n\n\nconst initialState: RootState = {\n  loading: false,\n  loaded: false,\n  sortType: '',\n  todos: [],\n  errorMessage: '',\n};\n\n\n// rootReducer - this function is called after dispatching an action\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: loadedReducer,\n  sortType: sortTypeReducer,\n  todos: todosReducer,\n  errorMessage: errorMessageReducer,\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { isLoading } from '../store';\nimport { loadingAction } from '../store/loading';\n\n/**\n * mapState - is a function receiving full Redux state as the first argument\n * and returning an object with extra props that will be added to a component\n * after calling connect(mapState)(MyComponent)\n *\n * @param {object} state - full Redux state\n *\n * @return {object}\n */\nconst mapState = (state: RootState) => {\n  return {\n    loading: isLoading(state), // we use a selector `isLoading` defined in the store\n  };\n};\n\n/**\n * We use an object syntax for `mapDispatch` where\n * `load` - is a callback name passed to the component as a prop\n * `startLoading` - is an action creator defined in the store\n */\nconst mapDispatch = {\n  load: loadingAction,\n};\n\n/**\n * We split the connect(mapState, mapDispatch)(MyComponent) into 2 parts\n * to be able to use `typeof connector` for `MyComponent` props\n */\nconst connector = connect(mapState, mapDispatch);\n\n/**\n * We use ConnectedProps<typeof connector> to get the type for all the extra\n * props received from `mapState` and `mapDispatch`\n */\ntype Props = ConnectedProps<typeof connector> & {\n  title: string; // a regular prop passed like <Start title=\"Start loading\" />\n};\n\nconst Start: React.FC<Props> = ({ load, loading, title }) => {\n  return (\n    <button\n      type=\"button\"\n      onClick={load}\n      disabled={loading}\n    >\n      {title}\n    </button>\n  );\n};\n\nexport default connector(Start);\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst TODOS_PATH = '/todos.json';\nconst USERS_PATH = '/users.json';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n\nconst getTodos = () => getAll<Todo>(TODOS_PATH);\nconst getUsers = () => getAll<User>(USERS_PATH);\n\nexport const getData = async () => {\n  const todosFromServer = await getTodos();\n  const usersFromServer = await getUsers();\n\n  const preparedTodos = todosFromServer.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(user => user.id === todo.userId),\n  }));\n\n  return preparedTodos;\n}\n","import React from 'react';\nimport './TodoCard.css';\n\ntype Props = {\n  todo: Todo;\n}\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <li className=\"todo__item\">\n    <h2 className=\"todo_item-title\">{todo.title}</h2>\n    <p className=\"todo__user\">{todo.user? todo.user.name : 'Unknown'}</p>\n    {todo.completed\n      ? <div className=\"todo__item-completed--true\">Completed</div>\n      : <div className=\"todo__item-completed--false\">Not completed</div>\n    }\n  </li>\n)\n","import React from 'react';\nimport { TodoCard } from '../TodoCard/TodoCard';\nimport './TodoList.css';\n\ntype Props = {\n  todoList: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todoList }) => (\n  <ul className=\"todo__list\">\n    {todoList.map((todo: Todo) => (\n      <TodoCard todo={todo} key={todo.id} />\n    ))}\n  </ul>\n);\n\n","import React from 'react';\nimport './TodoButton.css';\n\ntype Props = {\n  handleClick: () => void;\n  title: string;\n  status: boolean;\n}\n\nexport const TodoButton: React.FC<Props> = ({ title, handleClick, status }) => (\n  <button\n    type=\"button\"\n    className=\"todo__button\"\n    onClick={handleClick}\n    disabled={status}\n  >\n    {status ? 'Loading...' : title}\n  </button>\n);\n","import React, { useState, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport Start from './components/Start';\nimport { Finish } from './components/Finish';\n\nimport { isLoading, getErrorMessage } from './store';\n\nimport { getData } from './helpers/getData';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoButton } from './components/TodoButton/TodoButton';\nimport { getSortedTodos } from './helpers/helpers';\n\nconst App = () => {\n  const [sortType, setSortType] = useState('');\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const todoList = await getData();\n\n      setTodos(todoList);\n      setIsLoaded(true);\n\n      if (todoList.length === 0) {\n        setErrorMessage('No Todos, try again later.');\n      } else {\n        setErrorMessage('');\n      }\n    } catch (exeption) {\n      setErrorMessage('Network error, try again.');\n    }\n\n    setIsLoading(false);\n  }\n\n  const reset = () => {\n    setSortType('');\n  }\n\n  const sortListByTitle = () => {\n    setSortType('title');\n  }\n\n  const sortListByUser = () => {\n    setSortType('author');\n  }\n\n  const sortListByStatus = () => {\n    setSortType('status');\n  }\n\n  const sortedTodos = useMemo(() => {\n    return getSortedTodos(todos, sortType);\n  }, [todos, sortType]);\n\n  return (\n    <div className=\"todo\">\n      <h1 className=\"todo__title\">List of Todos</h1>\n\n      {!isLoaded ? (\n        <>\n          {errorMessage && <span className=\"todo__error\">{errorMessage}</span>}\n\n          <TodoButton\n            title=\"Load\"\n            handleClick={handleLoadClick}\n            status={isLoading}\n          />\n        </>\n      ) : (\n        !errorMessage.length ? (\n          <>\n            <div className=\"todo__sort-buttons\">\n              <TodoButton\n                title=\"Sort by title\"\n                handleClick={sortListByTitle}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Sort by authors\"\n                handleClick={sortListByUser}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Sort by status\"\n                handleClick={sortListByStatus}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Reset\"\n                handleClick={reset}\n                status={isLoading}\n              />\n            </div>\n            <TodoList todoList={sortedTodos} />\n          </>\n        ) : (\n          <>\n            <span className=\"todo__error\">{errorMessage}</span>\n\n            <TodoButton\n              title=\"Reload\"\n              handleClick={handleLoadClick}\n              status={isLoading}\n            />\n          </>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\nexport const App2 = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getErrorMessage) || 'Ready!';\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      <h2>{loading ? 'Loading...' : message}</h2>\n\n      <Start title=\"Start loading\" />\n      <Finish title=\"Succeed loading\" message=\"Loaded successfully!\" />\n      <Finish title=\"Fail loading\" message=\"An error occurred when loading data.\" />\n    </div>\n  );\n};\n","export const getSortedTodos = (todos: Todo[], sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((currTodo, nextTodo) => (\n        currTodo.title.localeCompare(nextTodo.title)));\n\n    case 'author':\n      return [...todos].sort((currTodo, nextTodo) => {\n        return (currTodo.user && nextTodo.user)\n          ? currTodo.user.name.localeCompare(nextTodo.user.name)\n          : 0;\n      });\n\n    case 'status':\n      return [...todos].sort((currTodo, nextTodo) => {\n        return (currTodo.completed === nextTodo.completed)\n          ? 0 : currTodo.completed ? -1 : 1;\n      });\n\n    default:\n      return todos;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}