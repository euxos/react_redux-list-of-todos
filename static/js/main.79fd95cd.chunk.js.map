{"version":3,"sources":["store/loading.ts","store/loaded.ts","store/sortType.ts","store/todos.ts","store/errorMessage.ts","store/index.ts","helpers/getData.ts","components/TodoCard/TodoCard.tsx","components/TodoList/TodoList.tsx","components/TodoButton/TodoButton.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["loadingAction","status","type","loadingReducer","state","action","loadedReducer","setSortTypeAction","sortType","sortTypeReducer","setTodosAction","todos","todosReducer","setErrorMessageAction","message","errorMessageReducer","getLoadingStatus","loading","getLoadedStatus","loaded","getSortType","getTodos","getErrorMessage","errorMessage","rootReducer","combineReducers","store","createStore","composeWithDevTools","getAll","url","fetch","then","response","json","getData","a","todosFromServer","usersFromServer","preparedTodos","map","todo","user","find","id","userId","TodoCard","className","title","name","completed","TodoList","todoList","key","TodoButton","handleClick","onClick","disabled","App","dispatch","useDispatch","useSelector","isLoading","isLoaded","handleLoadClick","length","sortedTodos","useMemo","sort","currTodo","nextTodo","localeCompare","getSortedTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79fd95cd.chunk.js","sourcesContent":["import { Action } from 'redux';\n\nconst LOADING = 'START_LOADING';\n\ntype Loading = Action<typeof LOADING> & { status: boolean };\n\nexport const loadingAction = (status: boolean): Loading => ({ type: LOADING, status });\n\n\nconst loadingReducer = (state = false, action: Loading) => {\n  switch (action.type) {\n    case LOADING:\n      return action.status;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadingReducer;\n","import { Action } from 'redux';\n\nconst LOADED = 'LOADED';\n\ntype Loaded = Action<typeof LOADED> & { status: boolean };\n\nexport const loadedAction= (status: boolean): Loaded => ({ type: LOADED, status });\n\nconst loadedReducer = (state = false, action: Loaded) => {\n  switch (action.type) {\n    case LOADED:\n      return action.status;\n\n    default:\n      return state;\n  }\n};\n\nexport default loadedReducer;\n","import { Action } from 'redux';\n\nconst SORT_TYPE = 'SORT_TYPE';\n\ntype SortType = Action<typeof SORT_TYPE> & { sortType: string };\n\nexport const setSortTypeAction = (sortType: string): SortType => ({ type: SORT_TYPE, sortType });\n\nconst sortTypeReducer = (state = '', action: SortType) => {\n  switch (action.type) {\n    case SORT_TYPE:\n      return action.sortType;\n\n    default:\n      return state;\n  }\n};\n\nexport default sortTypeReducer;\n","import { Action } from 'redux';\n\nconst TODOS = 'TODOS';\n\ntype Todos = Action<typeof TODOS> & { todos: Todo[] };\n\nexport const setTodosAction = (todos: Todo[]): Todos => ({ type: TODOS, todos });\n\nconst todosReducer = (state = [] as Todo[], action: Todos) => {\n  switch (action.type) {\n    case TODOS:\n      return action.todos;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { Action } from 'redux';\n\nconst ERROR = 'ERROR';\n\ntype Error = Action<typeof ERROR> & { message: string };\n\nexport const setErrorMessageAction = (message: string): Error => ({\n  type: ERROR, message\n});\n\nconst errorMessageReducer = (state = '', action: Error) => {\n  switch (action.type) {\n    case ERROR:\n      return action.message;\n\n    default:\n      return state;\n  }\n};\n\nexport default errorMessageReducer;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport loadingReducer from './loading';\nimport loadedReducer from './loaded';\nimport sortTypeReducer from './sortType';\nimport todosReducer from './todos';\nimport errorMessageReducer from './errorMessage';\n\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const getLoadingStatus = (state: RootState) => state.loading;\nexport const getLoadedStatus = (state: RootState) => state.loaded;\nexport const getSortType = (state: RootState) => state.sortType;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getErrorMessage = (state: RootState) => state.errorMessage;\n\n\nconst initialState: RootState = {\n  loading: false,\n  loaded: false,\n  sortType: '',\n  todos: [],\n  errorMessage: '',\n};\n\n\n// rootReducer - this function is called after dispatching an action\n\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  loaded: loadedReducer,\n  sortType: sortTypeReducer,\n  todos: todosReducer,\n  errorMessage: errorMessageReducer,\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nconst TODOS_PATH = '/todos.json';\nconst USERS_PATH = '/users.json';\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n}\n\nconst getTodos = () => getAll<Todo>(TODOS_PATH);\nconst getUsers = () => getAll<User>(USERS_PATH);\n\nexport const getData = async () => {\n  const todosFromServer = await getTodos();\n  const usersFromServer = await getUsers();\n\n  const preparedTodos = todosFromServer.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(user => user.id === todo.userId),\n  }));\n\n  return preparedTodos;\n}\n","import React from 'react';\nimport './TodoCard.css';\n\ntype Props = {\n  todo: Todo;\n}\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <li className=\"todo__item\">\n    <h2 className=\"todo_item-title\">{todo.title}</h2>\n    <p className=\"todo__user\">{todo.user? todo.user.name : 'Unknown'}</p>\n    {todo.completed\n      ? <div className=\"todo__item-completed--true\">Completed</div>\n      : <div className=\"todo__item-completed--false\">Not completed</div>\n    }\n  </li>\n)\n","import React from 'react';\nimport { TodoCard } from '../TodoCard/TodoCard';\nimport './TodoList.css';\n\ntype Props = {\n  todoList: Todo[];\n}\n\nexport const TodoList: React.FC<Props> = ({ todoList }) => (\n  <ul className=\"todo__list\">\n    {todoList.map((todo: Todo) => (\n      <TodoCard todo={todo} key={todo.id} />\n    ))}\n  </ul>\n);\n\n","import React from 'react';\nimport './TodoButton.css';\n\ntype Props = {\n  handleClick: () => void;\n  title: string;\n  status: boolean;\n}\n\nexport const TodoButton: React.FC<Props> = ({ title, handleClick, status }) => (\n  <button\n    type=\"button\"\n    className=\"todo__button\"\n    onClick={handleClick}\n    disabled={status}\n  >\n    {status ? 'Loading...' : title}\n  </button>\n);\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setTodosAction } from './store/todos';\nimport { loadingAction } from './store/loading';\nimport { loadedAction } from './store/loaded';\nimport { setErrorMessageAction } from './store/errorMessage';\nimport { setSortTypeAction } from './store/sortType';\nimport {\n  getTodos,\n  getSortType,\n  getErrorMessage,\n  getLoadedStatus,\n  getLoadingStatus,\n} from './store';\n\nimport './App.scss';\n\nimport { getData } from './helpers/getData';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoButton } from './components/TodoButton/TodoButton';\nimport { getSortedTodos } from './helpers/helpers';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const todos: Todo[] = useSelector(getTodos);\n  const isLoading = useSelector(getLoadingStatus)\n  const isLoaded = useSelector(getLoadedStatus);\n  const sortType = useSelector(getSortType);\n  const errorMessage = useSelector(getErrorMessage);\n\n  const handleLoadClick = async () => {\n    dispatch(loadingAction(true));\n\n    try {\n      const todoList = await getData();\n\n      dispatch(setTodosAction(todoList));\n      dispatch(loadedAction(true));\n\n      if (todoList.length === 0) {\n        dispatch(setErrorMessageAction('No Todos, try again later.'));\n      } else {\n        dispatch(setErrorMessageAction(''));\n      }\n    } catch (exeption) {\n      dispatch(setErrorMessageAction('Network error, try again.'));\n    }\n\n    dispatch(loadingAction(false));\n  }\n\n  const reset = () => {\n    dispatch(setSortTypeAction(''));\n  }\n\n  const sortListByTitle = () => {\n    dispatch(setSortTypeAction('title'));\n  }\n\n  const sortListByUser = () => {\n    dispatch(setSortTypeAction('author'));\n  }\n\n  const sortListByStatus = () => {\n    dispatch(setSortTypeAction('status'));\n  }\n\n  const sortedTodos = useMemo(() => {\n    return getSortedTodos(todos, sortType);\n  }, [todos, sortType]);\n\n  return (\n    <div className=\"todo\">\n      <h1 className=\"todo__title\">List of Todos</h1>\n\n      {!isLoaded ? (\n        <>\n          {errorMessage && <span className=\"todo__error\">{errorMessage}</span>}\n\n          <TodoButton\n            title=\"Load\"\n            handleClick={handleLoadClick}\n            status={isLoading}\n          />\n        </>\n      ) : (\n        !errorMessage.length ? (\n          <>\n            <div className=\"todo__sort-buttons\">\n              <TodoButton\n                title=\"Sort by title\"\n                handleClick={sortListByTitle}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Sort by authors\"\n                handleClick={sortListByUser}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Sort by status\"\n                handleClick={sortListByStatus}\n                status={isLoading}\n              />\n              <TodoButton\n                title=\"Reset\"\n                handleClick={reset}\n                status={isLoading}\n              />\n            </div>\n            <TodoList todoList={sortedTodos} />\n          </>\n        ) : (\n          <>\n            <span className=\"todo__error\">{errorMessage}</span>\n\n            <TodoButton\n              title=\"Reload\"\n              handleClick={handleLoadClick}\n              status={isLoading}\n            />\n          </>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","export const getSortedTodos = (todos: Todo[], sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((currTodo, nextTodo) => (\n        currTodo.title.localeCompare(nextTodo.title)));\n\n    case 'author':\n      return [...todos].sort((currTodo, nextTodo) => {\n        return (currTodo.user && nextTodo.user)\n          ? currTodo.user.name.localeCompare(nextTodo.user.name)\n          : 0;\n      });\n\n    case 'status':\n      return [...todos].sort((currTodo, nextTodo) => {\n        return (currTodo.completed === nextTodo.completed)\n          ? 0 : currTodo.completed ? -1 : 1;\n      });\n\n    default:\n      return todos;\n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}